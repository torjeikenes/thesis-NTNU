@inproceedings{chuahFormalVerificationSecurity2023,
  title = {Formal {{Verification}} of {{Security Properties}} on {{RISC-V Processors}}},
  booktitle = {Proceedings of the 21st {{ACM-IEEE International Conference}} on {{Formal Methods}} and {{Models}} for {{System Design}}},
  author = {Chuah, Czea Sie and Appold, Christian and Leinmueller, Tim},
  year = {2023},
  month = sep,
  pages = {159--168},
  publisher = {{ACM}},
  address = {{Hamburg Germany}},
  doi = {10.1145/3610579.3611085},
  urldate = {2024-01-23},
  abstract = {Hardware Security and trustworthiness are becoming ever more important, especially for security-critical applications like autonomous driving and service robots. With the increase in distribution of RISCV processors, security issues in them arise. Security vulnerabilities and design flaws in processors can be exploited by attackers, e.g. by running software exploiting the vulnerabilities. This can lead to drastic consequences like damaging whole system functionality and even human lives can be endangered. Hence, it is very important to verify compliance of processors with the design specification and microarchitecture intent to harden the hardware against malicious attacks. Detection and removal of design bugs results in improved processor security. Therefore, we formally verify in this paper the security-critical functionality of a commercial RISC-V processor using model checking based formal verification with the formal verification tool Jasper. For this, we determined and implemented a comprehensive list of properties for security-critical functionality, derived from RISC-V specification and processor microarchitecture intent. The properties cover the security-critical functionality within a RISC-V processor. With our verification experiments, we detected design bugs which have been confirmed by the design team.},
  isbn = {9798400703188},
  langid = {english},
  file = {/home/torje/Zotero/storage/QH6U436C/Chuah et al. - 2023 - Formal Verification of Security Properties on RISC.pdf}
}

@inproceedings{duranSimulationFormalBest2020a,
  title = {Simulation and {{Formal}}: {{The Best}} of {{Both Domains}} for {{Instruction Set Verification}} of {{RISC-V Based Processors}}},
  shorttitle = {Simulation and {{Formal}}},
  booktitle = {2020 {{IEEE International Symposium}} on {{Circuits}} and {{Systems}} ({{ISCAS}})},
  author = {Duran, Ckristian and Morales, Hanssel and Rojas, Camilo and Ruospo, Annachiara and Sanchez, Ernesto and Roa, Elkim},
  year = {2020},
  month = oct,
  pages = {1--4},
  publisher = {{IEEE}},
  address = {{Seville, Spain}},
  doi = {10.1109/ISCAS45731.2020.9180589},
  urldate = {2024-01-23},
  abstract = {The instruction set architecture (ISA) specifies a contract between hardware and software; it covers all possible operations that have to be performed by a processor, regardless of the implemented architecture. Verifying the instruction execution against a golden execution model following the ISA is becoming a common practice to verify processors. Despite many potential applications, existing verification frameworks require an extensive test set to cover most of the processor states. In this paper, we suggest a verification scheme combining two different domains, simulation- and formal-verification, establishing a methodology for exclusive error detection. The first approach drives automatic program generation using genetic algorithms to maximize coverage of the test and the contrast against an instruction set simulator. The second is a formal verification approach, where an interface carries specific processor states according to the ISA specification. By combining these two, we present a reliable way to perform more accurate instruction verification by increasing processor state coverage and formal assertions to detect different kinds of errors. Compared to extensive torture test sets, this approach reaches a more significant number of internal states by taking advantage of the exercised abstractions. Among remarkable results to highlight, the proposed approach detected a RISC-V ISA specification gap revealing ambiguity from two different verification perspectives.},
  isbn = {978-1-72813-320-1},
  langid = {english},
  file = {/home/torje/Zotero/storage/8VRYFXHD/Duran et al. - 2020 - Simulation and Formal The Best of Both Domains fo.pdf}
}

@inproceedings{funckIdentificationISALevelMutationClasses2023,
  title = {Identification of {{ISA-Level Mutation-Classes}} for {{Qualification}} of {{RISC-V Formal Verification}}},
  booktitle = {2023 {{Forum}} on {{Specification}} \& {{Design Languages}} ({{FDL}})},
  author = {Funck, Milan and {Ahmadi-Pour}, Sallar and Herdt, Vladimir and Drechsler, Rolf},
  year = {2023},
  month = sep,
  pages = {1--8},
  publisher = {{IEEE}},
  address = {{Turin, Italy}},
  doi = {10.1109/FDL59689.2023.10272202},
  urldate = {2024-01-23},
  abstract = {RISC-V has generated a lot of interest in academia and industry alike due to the open source, modular, and royalty-free design of the Instruction Set Architecture (ISA). With its modular extensibility and the ability to customize the ISA to meet application-specific needs, new challenges arise in terms of verification. Various approaches have been proposed to overcome these challenges, including traditional simulation-based verification and formal verification. While formal verification is considered thorough, its quality heavily depends on the properties and assumptions of the proofs meeting the exact specification.},
  isbn = {9798350307375},
  langid = {english},
  file = {/home/torje/Zotero/storage/VTEHHG6A/Funck et al. - 2023 - Identification of ISA-Level Mutation-Classes for Q.pdf}
}

@article{gaoEndtoEndFormalVerification2021a,
  title = {End-to-{{End Formal Verification}} of a {{RISC-V Processor Extended}} with {{Capability Pointers}}},
  author = {Gao, Dapeng and Melham, Tom},
  year = {2021},
  month = oct,
  publisher = {{TU Wien}},
  doi = {10.34727/2021/ISBN.978-3-85448-046-4_10},
  urldate = {2024-01-23},
  abstract = {Capability Hardware Enhanced RISC Instructions (CHERI) extend conventional ISAs with capabilities that can enable fine-grained memory protection and scalable software compartmentalisation. CHERI-RISC-V is an extended version of the RISC-V ISA with support for CHERI, and Flute is an open-source 64-bit RISC-V processor with a five-stage, inorder pipeline. This case study presents the formal verification of CHERI-Flute, a modified version of Flute that implements CHERI-RISC-V, against the Sail CHERI-RISC-V specification. To the best of our knowledge, this is the first extensive formal verification of a CHERI-enabled processor.},
  collaborator = {{TU Wien} and {TU Wien}},
  copyright = {Creative Commons Attribution 4.0 International},
  langid = {english},
  keywords = {formal methods,formale Methode},
  file = {/home/torje/Zotero/storage/S8URXE23/Gao and Melham - 2021 - End-to-End Formal Verification of a RISC-V Process.pdf}
}

@misc{IEEEXploreFullText,
  title = {{{IEEE Xplore Full-Text PDF}}:},
  urldate = {2024-01-23},
  howpublished = {https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=\&arnumber=10272202},
  file = {/home/torje/Zotero/storage/BPTQ868F/stamp.html}
}

@article{piskacEndtoEndFormalVerification2021,
  title = {End-to-{{End Formal Verification}} of a {{RISC-V Processor Extended}} with {{Capability Pointers}}},
  author = {Piskac, Ruzica and Whalen, Michael W.},
  year = {2021},
  month = oct,
  publisher = {{TU Wien}},
  doi = {10.34727/2021/ISBN.978-3-85448-046-4},
  urldate = {2024-01-15},
  abstract = {Capability Hardware Enhanced RISC Instructions (CHERI) extend conventional ISAs with capabilities that can enable fine-grained memory protection and scalable software compartmentalisation. CHERI-RISC-V is an extended version of the RISC-V ISA with support for CHERI, and Flute is an open-source 64-bit RISC-V processor with a five-stage, inorder pipeline. This case study presents the formal verification of CHERI-Flute, a modified version of Flute that implements CHERI-RISC-V, against the Sail CHERI-RISC-V specification. To the best of our knowledge, this is the first extensive formal verification of a CHERI-enabled processor.},
  collaborator = {{TU Wien} and {TU Wien} and Piskac, Ruzica and Whalen, Michael W.},
  copyright = {Creative Commons Attribution 4.0 International},
  langid = {english},
  keywords = {automated and formal reasoning,automatisches Schlussfolgern,computer-aided system design,formal methods,formal verification,formale Logik,formale Methode,formale Verifikation,hardware and system verification,Hardwareverifikation,rechnerunterst{\"u}tzte Systementwicklung,specification,Spezifikation,Synthese und Testung,synthesis and testing,Systemverifikation},
  file = {/home/torje/Zotero/storage/BQPB3WUQ/Piskac and Whalen - 2021 - Proceedings of the 21st Conference on Formal Metho.pdf}
}

@book{seligmanFormalVerificationEssential2015,
  title = {Formal Verification: An Essential Toolkit for Modern {{VLSI}} Design},
  shorttitle = {Formal Verification},
  author = {Seligman, Erik and Schubert, E. Thomas and Kumar, M. V. Achutha Kiran},
  year = {2015},
  publisher = {{Elsevier/MK, Morgan Kaufmann is an imprint of Elsevier}},
  address = {{Amsterdam ; Boston}},
  isbn = {978-0-12-800727-3},
  langid = {english},
  lccn = {TK7874.75 .S44 2015},
  keywords = {Electronic circuits,Integrated circuits,Testing,Verilog (Computer hardware description language),Very large scale integration Design and construction},
  annotation = {OCLC: ocn920376471},
  file = {/home/torje/Zotero/storage/6GGQ249F/Chapter-1---Formal-verification--From-dreams-to-reali_2015_Formal-Verificati.pdf;/home/torje/Zotero/storage/6LMYNDBR/Chapter-10---Dealing-with-complexity_2015_Formal-Verification.pdf;/home/torje/Zotero/storage/78V23MRI/Index_2015_Formal-Verification.pdf;/home/torje/Zotero/storage/8NKEV7VX/Chapter-11---Your-new-FV-aware-lifestyle_2015_Formal-Verification.pdf;/home/torje/Zotero/storage/8UDGVZ4D/Chapter-9---Formal-verification-s-greatest-bloopers--The-_2015_Formal-Verifi.pdf;/home/torje/Zotero/storage/9MXHPTPW/Chapter-5---Effective-FPV-for-design-exercise_2015_Formal-Verification.pdf;/home/torje/Zotero/storage/C3BSXWGS/Chapter-3---Introduction-to-systemverilog-assertions_2015_Formal-Verificatio.pdf;/home/torje/Zotero/storage/CP8VN4I5/Chapter-4---Formal-property-verification_2015_Formal-Verification.pdf;/home/torje/Zotero/storage/HJ9SEGLM/Chapter-7---FPV--Apps--for-specific-SOC-problems_2015_Formal-Verification.pdf;/home/torje/Zotero/storage/HK8ZAAZX/Chapter-2---Basic-formal-verification-algorithms_2015_Formal-Verification.pdf;/home/torje/Zotero/storage/LQCMXVXT/Chapter-6---Effective-FPV-for-verification_2015_Formal-Verification.pdf;/home/torje/Zotero/storage/UYE9TJTP/Seligman et al. - 2015 - Formal verification an essential toolkit for mode.pdf;/home/torje/Zotero/storage/Y6JTY8DW/Chapter-8---Formal-equivalence-verification_2015_Formal-Verification.pdf}
}

@inproceedings{sriHolisticApproachCPU2022,
  title = {A {{Holistic Approach}} to {{CPU Verification}} Using {{Formal Techniques}}},
  booktitle = {2022 {{IEEE Women}} in {{Technology Conference}} ({{WINTECHCON}})},
  author = {Sri, Dasari Bhavya and Rajakumar, Karthik and Madhusoodhanan, Pooja and Edarapalli, Venkata Nitin},
  year = {2022},
  month = jun,
  pages = {1--5},
  publisher = {{IEEE}},
  address = {{Bangalore, India}},
  doi = {10.1109/WINTECHCON55229.2022.9832178},
  urldate = {2024-01-23},
  abstract = {As real-time applications become increasingly demanding, complex CPU architectural techniques like Instruction Level Parallelism (ILP) and Very Long Instruction Word (VLIW) are the new norm. Processors have evolved along a similar trajectory to include twice the number of instructions compared to its predecessor, the ability to fetch a larger instruction packet and execute multiple instructions simultaneously. To ensure that the design meets the specification it's imperative to verify every possible operand combination as well as sequencing of instructions. This demands deployment of novel techniques which can reduce verification effort without compromising on the quality. In this paper, we propose a Formal Verification (FV) based ``divide-and-conquer'' approach to CPU verification which utilizes executable specification. We propose dividing the verification effort into two levels of design abstraction, namely basic functional unit level (e.g. Adder (ADD), Multiply and Accumulate (MAC), etc.) and module level (e.g. collection of functional units like ALU). FV allows us to cover the vast state space while avoiding the burden of developing corresponding stimulus. By automating the verification flow from an executable specification, we eliminate the possibility of human error and standardize the setup across functional units. We leverage these techniques to accomplish comprehensive verification goals and achieve design sign-off. When implemented, we were able to achieve 50\% reduction in the CPU verification effort and identify corner case bugs that would have been impossible to find using Dynamic Verification.},
  isbn = {978-1-66548-674-3},
  langid = {english},
  file = {/home/torje/Zotero/storage/QEHEN8S7/Sri et al. - 2022 - A Holistic Approach to CPU Verification using Form.pdf}
}

@inproceedings{yangResearchFormalVerification2019,
  title = {The {{Research}} on {{Formal Verification}} of {{CPU Structure Based}} on {{Theorem Proving}}},
  booktitle = {2019 {{IEEE}} 10th {{International Conference}} on {{Software Engineering}} and {{Service Science}} ({{ICSESS}})},
  author = {Yang, Hongwei and Ma, Dianfu},
  year = {2019},
  month = oct,
  pages = {1--5},
  publisher = {{IEEE}},
  address = {{Beijing, China}},
  doi = {10.1109/ICSESS47205.2019.9040731},
  urldate = {2024-01-23},
  abstract = {With the development of SOC technology, the structure of today's CPU is very complex, conventional design and verification methods such as testing and simulating can't guarantee the correctness of CPU structure designs. In the area of CPU design and verification, formal verification is an emerging technology. To solve the problem of verifying CPU structure, we construct the CPU structure axiom system based on the CPU structure model and propose a formal method that proving theorem on this axiom system. Meanwhile we develop an automated verification tool. In this paper we describe our formal verification work on MIPS CPU.},
  isbn = {978-1-72810-945-9},
  langid = {english},
  file = {/home/torje/Zotero/storage/UXTZ9EXJ/Yang and Ma - 2019 - The Research on Formal Verification of CPU Structu.pdf}
}
