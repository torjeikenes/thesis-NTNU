@incollection{adamchlipalaIntroduction2013,
  title = {Introduction},
  booktitle = {Certified {{Programming}} with {{Dependent Types}}: {{A Pragmatic Introduction}} to the {{Coq Proof Assistant}}},
  author = {{Adam Chlipala}},
  year = {2013},
  pages = {1--12},
  abstract = {The technology of mechanized program verification can play a supporting role in many kinds of research projects in computer science, and related tools for formal proof-checking are seeing increasing adoption in mathematics and engineering. This book provides an introduction to the Coq software for writing and checking mathematical proofs. It takes a practical engineering focus throughout, emphasizing techniques that will help users to build, understand, and maintain large Coq developments and minimize the cost of code change over time. Two topics, rarely discussed elsewhere, are covered in detail: effective dependently typed programming (making productive use of a feature at the heart of the Coq system) and construction of domain-specific proof tactics. Almost every subject covered is also relevant to interactive computer theorem proving in general, not just program verification, demonstrated through examples of verified programs applied in many different sorts of formalizations. The book develops a unique automated proof style and applies it throughout; even experienced Coq users may benefit from reading about basic Coq concepts from this novel perspective. The book also offers a library of tactics, or programs that find proofs, designed for use with examples in the book. Readers will acquire the necessary skills to reimplement these tactics in other settings by the end of the book. All of the code appearing in the book is freely available online.},
  isbn = {978-0-262-31787-0},
  keywords = {notion},
  file = {/home/torje/Zotero/storage/8Y4252GG/6712773.pdf}
}

@inproceedings{berramlaFormalValidationModel2015,
  title = {Formal Validation of Model Transformation with {{Coq}} Proof Assistant},
  booktitle = {2015 {{First International Conference}} on {{New Technologies}} of {{Information}} and {{Communication}} ({{NTIC}})},
  author = {Berramla, Karima and Deba, El Abbassia and Senouci, Mohammed},
  year = {2015},
  month = nov,
  pages = {1--6},
  publisher = {{IEEE}},
  address = {{Mila, Algeria}},
  doi = {10.1109/NTIC.2015.7368755},
  urldate = {2024-01-24},
  abstract = {Facing the increasing complexity of systems and their design methods, the Model Driven Engineering (MDE) brings solutions to facilitate and automate the software development process. The model transformation is the most important artifact in MDE that it defines the automatic passing from one model to another. The validation of such model transformation are necessary to improve the safety of this latter, but most transformation languages have not a formal semantics to add detailed specifications on the expected behavior. So it is important to give solutions to integrate formal methods at this level. For this, we utilize the Coq proof assistant that is based on various calculus, for validating a model transformation specified with QVT-operational language. We illustrate our approach by transforming a UML state diagram into Petri net. .},
  isbn = {978-1-4673-6684-7 978-1-4673-6685-4},
  langid = {english},
  keywords = {notion},
  file = {/home/torje/Zotero/storage/SFC8JYUC/Berramla et al. - 2015 - Formal validation of model transformation with Coq.pdf}
}

@misc{CertifiedProgrammingDependent,
  title = {Certified {{Programming}} with {{Dependent Types}}: {{A Pragmatic Introduction}} to the {{Coq Proof Assistant}} {\textbar} {{MIT Press eBooks}} {\textbar} {{IEEE Xplore}}},
  urldate = {2024-01-24},
  howpublished = {https://ieeexplore.ieee.org/book/6712486},
  keywords = {notion},
  file = {/home/torje/Zotero/storage/BJFDKDXQ/6712486.html}
}

@inproceedings{chuahFormalVerificationSecurity2023,
  title = {Formal {{Verification}} of {{Security Properties}} on {{RISC-V Processors}}},
  booktitle = {Proceedings of the 21st {{ACM-IEEE International Conference}} on {{Formal Methods}} and {{Models}} for {{System Design}}},
  author = {Chuah, Czea Sie and Appold, Christian and Leinmueller, Tim},
  year = {2023},
  month = sep,
  pages = {159--168},
  publisher = {{ACM}},
  address = {{Hamburg Germany}},
  doi = {10.1145/3610579.3611085},
  urldate = {2024-01-23},
  abstract = {Hardware Security and trustworthiness are becoming ever more important, especially for security-critical applications like autonomous driving and service robots. With the increase in distribution of RISCV processors, security issues in them arise. Security vulnerabilities and design flaws in processors can be exploited by attackers, e.g. by running software exploiting the vulnerabilities. This can lead to drastic consequences like damaging whole system functionality and even human lives can be endangered. Hence, it is very important to verify compliance of processors with the design specification and microarchitecture intent to harden the hardware against malicious attacks. Detection and removal of design bugs results in improved processor security. Therefore, we formally verify in this paper the security-critical functionality of a commercial RISC-V processor using model checking based formal verification with the formal verification tool Jasper. For this, we determined and implemented a comprehensive list of properties for security-critical functionality, derived from RISC-V specification and processor microarchitecture intent. The properties cover the security-critical functionality within a RISC-V processor. With our verification experiments, we detected design bugs which have been confirmed by the design team.},
  isbn = {9798400703188},
  langid = {english},
  keywords = {notion},
  file = {/home/torje/Zotero/storage/QH6U436C/Chuah et al. - 2023 - Formal Verification of Security Properties on RISC.pdf}
}

@inproceedings{duranSimulationFormalBest2020,
  title = {Simulation and {{Formal}}: {{The Best}} of {{Both Domains}} for {{Instruction Set Verification}} of {{RISC-V Based Processors}}},
  shorttitle = {Simulation and {{Formal}}},
  booktitle = {2020 {{IEEE International Symposium}} on {{Circuits}} and {{Systems}} ({{ISCAS}})},
  author = {Duran, Ckristian and Morales, Hanssel and Rojas, Camilo and Ruospo, Annachiara and Sanchez, Ernesto and Roa, Elkim},
  year = {2020},
  month = oct,
  pages = {1--4},
  publisher = {{IEEE}},
  address = {{Seville, Spain}},
  doi = {10.1109/ISCAS45731.2020.9180589},
  urldate = {2023-12-05},
  abstract = {The instruction set architecture (ISA) specifies a contract between hardware and software; it covers all possible operations that have to be performed by a processor, regardless of the implemented architecture. Verifying the instruction execution against a golden execution model following the ISA is becoming a common practice to verify processors. Despite many potential applications, existing verification frameworks require an extensive test set to cover most of the processor states. In this paper, we suggest a verification scheme combining two different domains, simulation- and formal-verification, establishing a methodology for exclusive error detection. The first approach drives automatic program generation using genetic algorithms to maximize coverage of the test and the contrast against an instruction set simulator. The second is a formal verification approach, where an interface carries specific processor states according to the ISA specification. By combining these two, we present a reliable way to perform more accurate instruction verification by increasing processor state coverage and formal assertions to detect different kinds of errors. Compared to extensive torture test sets, this approach reaches a more significant number of internal states by taking advantage of the exercised abstractions. Among remarkable results to highlight, the proposed approach detected a RISC-V ISA specification gap revealing ambiguity from two different verification perspectives.},
  isbn = {978-1-72813-320-1},
  langid = {english},
  keywords = {notion},
  file = {/home/torje/Zotero/storage/9R3FFNI9/Duran et al. - 2020 - Simulation and Formal The Best of Both Domains fo.pdf}
}

@inproceedings{funckIdentificationISALevelMutationClasses2023,
  title = {Identification of {{ISA-Level Mutation-Classes}} for {{Qualification}} of {{RISC-V Formal Verification}}},
  booktitle = {2023 {{Forum}} on {{Specification}} \& {{Design Languages}} ({{FDL}})},
  author = {Funck, Milan and {Ahmadi-Pour}, Sallar and Herdt, Vladimir and Drechsler, Rolf},
  year = {2023},
  month = sep,
  pages = {1--8},
  publisher = {{IEEE}},
  address = {{Turin, Italy}},
  doi = {10.1109/FDL59689.2023.10272202},
  urldate = {2024-01-23},
  abstract = {RISC-V has generated a lot of interest in academia and industry alike due to the open source, modular, and royalty-free design of the Instruction Set Architecture (ISA). With its modular extensibility and the ability to customize the ISA to meet application-specific needs, new challenges arise in terms of verification. Various approaches have been proposed to overcome these challenges, including traditional simulation-based verification and formal verification. While formal verification is considered thorough, its quality heavily depends on the properties and assumptions of the proofs meeting the exact specification.},
  isbn = {9798350307375},
  langid = {english},
  keywords = {notion},
  file = {/home/torje/Zotero/storage/VTEHHG6A/Funck et al. - 2023 - Identification of ISA-Level Mutation-Classes for Q.pdf}
}

@article{gaoEndtoEndFormalVerification2021,
  title = {End-to-{{End Formal Verification}} of a {{RISC-V Processor Extended}} with {{Capability Pointers}}},
  author = {Gao, Dapeng and Melham, Tom},
  year = {2021},
  month = oct,
  publisher = {{TU Wien}},
  doi = {10.34727/2021/ISBN.978-3-85448-046-4_10},
  urldate = {2023-11-03},
  abstract = {Capability Hardware Enhanced RISC Instructions (CHERI) extend conventional ISAs with capabilities that can enable fine-grained memory protection and scalable software compartmentalisation. CHERI-RISC-V is an extended version of the RISC-V ISA with support for CHERI, and Flute is an open-source 64-bit RISC-V processor with a five-stage, inorder pipeline. This case study presents the formal verification of CHERI-Flute, a modified version of Flute that implements CHERI-RISC-V, against the Sail CHERI-RISC-V specification. To the best of our knowledge, this is the first extensive formal verification of a CHERI-enabled processor.},
  collaborator = {{TU Wien} and {TU Wien}},
  copyright = {Creative Commons Attribution 4.0 International},
  langid = {english},
  keywords = {formal methods,formale Methode,notion},
  file = {/home/torje/Zotero/storage/MHG5HN7N/Gao and Melham - 2021 - End-to-End Formal Verification of a RISC-V Process.pdf}
}

@article{ludwigPropertiesFirstCorrectByConstruction2020,
  title = {Properties {{First}}{\textemdash}{{Correct-By-Construction RTL Design}} in {{System-Level Design Flows}}},
  author = {Ludwig, Tobias and Urdahl, Joakim and Stoffel, Dominik and Kunz, Wolfgang},
  year = {2020},
  month = oct,
  journal = {IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems},
  volume = {39},
  number = {10},
  pages = {3093--3106},
  issn = {0278-0070, 1937-4151},
  doi = {10.1109/TCAD.2019.2921319},
  urldate = {2024-01-23},
  abstract = {This paper presents a new Property-Driven Design (PDD) method that starts from an abstract system model and integrates formal property checking early into a top-down design methodology for register transfer level (RTL) hardware. In PDD the role of formal verification is not limited to ``bug hunting'' alone. Instead, the formal techniques are applied in such a way that a formal relationship is provided between the abstract system model and its concrete implementation at the RTL. In order to avoid the high efforts associated with verification by property checking the proposed PDD approach automatically generates abstract properties from a system-level description and later refines them along the design process. The advantage of this methodology is to obtain a formally verified design at lower costs when compared to conventional design flows with property checking. The main benefit of the proposed approach results from the fact that a formally sound system model is available together with the RTL design. Specifically, LTL properties proven on the abstract model also hold on the concrete implementation. This facilitates many complex analysis and verification tasks in today's design flows and contributes to emancipating system-level models from prototypes to golden design models. Several open-source and industrial case studies are reported that demonstrate the high potential of a PDD-based design paradigm.},
  langid = {english},
  keywords = {notion},
  file = {/home/torje/Zotero/storage/QEY9PVFZ/Ludwig et al. - 2020 - Properties First—Correct-By-Construction RTL Desig.pdf}
}

@book{seligmanFormalVerificationEssential2015,
  title = {Formal Verification: An Essential Toolkit for Modern {{VLSI}} Design},
  shorttitle = {Formal Verification},
  author = {Seligman, Erik and Schubert, E. Thomas and Kumar, M. V. Achutha Kiran},
  year = {2015},
  publisher = {{Elsevier/MK, Morgan Kaufmann is an imprint of Elsevier}},
  address = {{Amsterdam ; Boston}},
  isbn = {978-0-12-800727-3},
  langid = {english},
  lccn = {TK7874.75 .S44 2015},
  keywords = {Electronic circuits,Integrated circuits,notion,Testing,Verilog (Computer hardware description language),Very large scale integration Design and construction},
  annotation = {OCLC: ocn920376471},
  file = {/home/torje/Zotero/storage/6GGQ249F/Chapter-1---Formal-verification--From-dreams-to-reali_2015_Formal-Verificati.pdf;/home/torje/Zotero/storage/6LMYNDBR/Chapter-10---Dealing-with-complexity_2015_Formal-Verification.pdf;/home/torje/Zotero/storage/78V23MRI/Index_2015_Formal-Verification.pdf;/home/torje/Zotero/storage/8NKEV7VX/Chapter-11---Your-new-FV-aware-lifestyle_2015_Formal-Verification.pdf;/home/torje/Zotero/storage/8UDGVZ4D/Chapter-9---Formal-verification-s-greatest-bloopers--The-_2015_Formal-Verifi.pdf;/home/torje/Zotero/storage/9MXHPTPW/Chapter-5---Effective-FPV-for-design-exercise_2015_Formal-Verification.pdf;/home/torje/Zotero/storage/C3BSXWGS/Chapter-3---Introduction-to-systemverilog-assertions_2015_Formal-Verificatio.pdf;/home/torje/Zotero/storage/CP8VN4I5/Chapter-4---Formal-property-verification_2015_Formal-Verification.pdf;/home/torje/Zotero/storage/HJ9SEGLM/Chapter-7---FPV--Apps--for-specific-SOC-problems_2015_Formal-Verification.pdf;/home/torje/Zotero/storage/HK8ZAAZX/Chapter-2---Basic-formal-verification-algorithms_2015_Formal-Verification.pdf;/home/torje/Zotero/storage/LQCMXVXT/Chapter-6---Effective-FPV-for-verification_2015_Formal-Verification.pdf;/home/torje/Zotero/storage/UYE9TJTP/Seligman et al. - 2015 - Formal verification an essential toolkit for mode.pdf;/home/torje/Zotero/storage/Y6JTY8DW/Chapter-8---Formal-equivalence-verification_2015_Formal-Verification.pdf}
}

@inproceedings{sriHolisticApproachCPU2022,
  title = {A {{Holistic Approach}} to {{CPU Verification}} Using {{Formal Techniques}}},
  booktitle = {2022 {{IEEE Women}} in {{Technology Conference}} ({{WINTECHCON}})},
  author = {Sri, Dasari Bhavya and Rajakumar, Karthik and Madhusoodhanan, Pooja and Edarapalli, Venkata Nitin},
  year = {2022},
  month = jun,
  pages = {1--5},
  publisher = {{IEEE}},
  address = {{Bangalore, India}},
  doi = {10.1109/WINTECHCON55229.2022.9832178},
  urldate = {2024-01-23},
  abstract = {As real-time applications become increasingly demanding, complex CPU architectural techniques like Instruction Level Parallelism (ILP) and Very Long Instruction Word (VLIW) are the new norm. Processors have evolved along a similar trajectory to include twice the number of instructions compared to its predecessor, the ability to fetch a larger instruction packet and execute multiple instructions simultaneously. To ensure that the design meets the specification it's imperative to verify every possible operand combination as well as sequencing of instructions. This demands deployment of novel techniques which can reduce verification effort without compromising on the quality. In this paper, we propose a Formal Verification (FV) based ``divide-and-conquer'' approach to CPU verification which utilizes executable specification. We propose dividing the verification effort into two levels of design abstraction, namely basic functional unit level (e.g. Adder (ADD), Multiply and Accumulate (MAC), etc.) and module level (e.g. collection of functional units like ALU). FV allows us to cover the vast state space while avoiding the burden of developing corresponding stimulus. By automating the verification flow from an executable specification, we eliminate the possibility of human error and standardize the setup across functional units. We leverage these techniques to accomplish comprehensive verification goals and achieve design sign-off. When implemented, we were able to achieve 50\% reduction in the CPU verification effort and identify corner case bugs that would have been impossible to find using Dynamic Verification.},
  isbn = {978-1-66548-674-3},
  langid = {english},
  keywords = {notion},
  file = {/home/torje/Zotero/storage/QEHEN8S7/Sri et al. - 2022 - A Holistic Approach to CPU Verification using Form.pdf}
}

@article{udupiExploitingHardwareUnobservability2019,
  title = {Exploiting {{Hardware Unobservability}} for {{Low-Power Design}} and {{Safety Analysis}} in {{Formal Verification-Driven Design Flows}}},
  author = {Udupi, Shrinidhi and Urdahl, Joakim and Stoffel, Dominik and Kunz, Wolfgang},
  year = {2019},
  month = jun,
  journal = {IEEE Transactions on Very Large Scale Integration (VLSI) Systems},
  volume = {27},
  number = {6},
  pages = {1262--1275},
  issn = {1063-8210, 1557-9999},
  doi = {10.1109/TVLSI.2019.2906820},
  urldate = {2024-01-23},
  abstract = {Formal techniques for the functional verification of System-on-Chip (SoC) hardware have matured significantly over the last years. They can penetrate deeply into a design to exhibit complex functional dependencies between various design components in terms of detailed logical and temporal relationships. They can also provide a well-defined formal relationship between an abstract system model of a design and its concrete implementation at the register-transfer level (RTL). This paper shows how such knowledge available from formal verification can be ``condensed'' into a database that stores all registers and flip-flops, at which time points they are actually relevant for the correct behavior of the design and when they are not. We show that the comprehensive information on temporary unobservabilities in the design can be of great value to reach two nonfunctional design goals that play a dominant role in many design flows: safety and low power consumption. This paper presents techniques to assess the effects of soft errors by single-event upsets (SEUs) with formal precision and to relate the results of the proposed analysis to an abstract system model. For example, our analysis can determine which soft errors may lead to a system ``crash'' and which are guaranteed not to cause any harm. For the application of the proposed approach in power optimization, this paper presents techniques for clock gating and power gating. For the examined designs, we observe a reduction of power consumption between 10\% and 50\% on top of the state-of-the-art commercial power synthesis.},
  langid = {english},
  keywords = {notion},
  file = {/home/torje/Zotero/storage/ZB2E3LRX/Udupi et al. - 2019 - Exploiting Hardware Unobservability for Low-Power .pdf}
}

@inproceedings{yangResearchFormalVerification2019,
  title = {The {{Research}} on {{Formal Verification}} of {{CPU Structure Based}} on {{Theorem Proving}}},
  booktitle = {2019 {{IEEE}} 10th {{International Conference}} on {{Software Engineering}} and {{Service Science}} ({{ICSESS}})},
  author = {Yang, Hongwei and Ma, Dianfu},
  year = {2019},
  month = oct,
  pages = {1--5},
  publisher = {{IEEE}},
  address = {{Beijing, China}},
  doi = {10.1109/ICSESS47205.2019.9040731},
  urldate = {2024-01-23},
  abstract = {With the development of SOC technology, the structure of today's CPU is very complex, conventional design and verification methods such as testing and simulating can't guarantee the correctness of CPU structure designs. In the area of CPU design and verification, formal verification is an emerging technology. To solve the problem of verifying CPU structure, we construct the CPU structure axiom system based on the CPU structure model and propose a formal method that proving theorem on this axiom system. Meanwhile we develop an automated verification tool. In this paper we describe our formal verification work on MIPS CPU.},
  isbn = {978-1-72810-945-9},
  langid = {english},
  keywords = {notion},
  file = {/home/torje/Zotero/storage/UXTZ9EXJ/Yang and Ma - 2019 - The Research on Formal Verification of CPU Structu.pdf}
}
